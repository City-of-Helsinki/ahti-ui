# AHTI API
# Version 0.1 

# Custom scalar types
scalar Date # @describedBy(url:"https://tools.ietf.org/html/rfc3339") # see: full-date
scalar DateTime # @describedBy(url:"https://tools.ietf.org/html/rfc3339") # see: date-time
scalar Time # @describedBy(url:"https://tools.ietf.org/html/rfc3339") # see: partial-time
# two letter country codes
scalar Language # @describedBy(url:"https://www.iso.org/iso-639-language-codes.html") # see: ISO 639-1:2002 
# TODO define GeoJSON as GraphQL types
scalar GeoJSON
scalar Url
# TODO Define description properly. Alternatives to consider:
#   1) Markdown (https://spec.commonmark.org/) + custom tags 
#   2) xhtml + custom tags 
#   3) structured content model
scalar Description

enum Weekday {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

type Query {
    features(filter: FeatureFilterInput, lang: Language, first: Int, after: String): FeatureConnection!
}

type FeatureFilterInput {
    # TODO: (loc+distance), tags, name, child, language, updatedSince, owner ...
}

type FeatureConnection {
    totalCount: Int!
    edges: [FeatureEdge!]!
    pageInfo: PageInfo!
}

type FeatureEdge {
    cursor: String!
    node: Feature!
}

# TODO for Features: 
#   category/type: Separate field necessary, or can we deal with Tags?
#   services: To be defined
#   products (items/services for sale): To be defined (linked with Johku categories?)

type Feature {
    id: ID!
    # type: Tag! # TODO Having a "main type" might be easier for the UI?
    title(lang: Language): LocalizedString!
    source: FeatureSource!
    description(lang: Language): Description
    partOf: Feature
    geometry: GeoJSON!
    address: Address
    # validity: ValidityPeriod # TODO: Specify validity period
    openingHours: [OpeningHoursPeriod!]
    createdAt: DateTime!
    modifiedAt: DateTime!
    url: Url
    #owner: String or object?
    tags: [Tag!]
    images: [Image!]
    # services: [Service!]
    # dynamic: Boolean
}

type LocalizedString {
    value: String
    translations: [StringTranslations!]!
}

type StringTranslations {
    lang: Language
    translation: String
}

# Source system for a feature
type FeatureSource {
    system: String!
    type: String
    id: String
}

type Address {
    streetAddress: String
    postalCode: String
    municipality: String
}

# TODO Specify validity period
# type ValidityPeriod {
#     season: Enum?  # 
#     from: Date # --05-01
#     to: Date
# }

type OpeningHoursPeriod {
    # validity: ValidityPeriod # TODO
    openingHours: [OpeningHours!]!
}


type OpeningHours {
    day: Weekday!
    # through: Weekday # maybe?
    opens: Time
    closes: time
    # allDay: Boolean # maybe?
}

type Tag {
    id: String! # can be Ahti internal id or yso/ysa or whatnot
    name: LocalizedString!
    url: Url # for external tags
}

type Image {
    url: Url!
    caption: LocalizedString
    copyrightOwner: String!
    license: License!
}

type License {
    name: LocalizedString!
    url: Url
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}
